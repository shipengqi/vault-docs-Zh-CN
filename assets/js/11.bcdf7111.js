(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{153:function(t,e,s){"use strict";s.r(e);var a=s(0),r=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("dev 服务器的属性（有些可以使用命令行标志或通过指定配置文件来覆盖）：")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("启动 Vault 服务器时，它将以密封状态启动。 在此状态下，Vault 配置为知道访问物理存储的位置和方式，但不知道如何解密任何物理存储。")]),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("在解封之前，Vault 几乎不可能进行任何操作。 例如，身份验证，管理挂载表等都是不可能的。 唯一可能的操作是启动 Vault 并检查解封的状态。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("Vault 使用称为 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shamir's Secret Sharing"),s("OutboundLink")],1),t._v(" 的算法将密钥拆分为分片，而不是将此主密钥作为单\n个密钥分发给操作者。 需要一定的分片阈值来重建主密钥。")]),t._v(" "),s("p",[t._v("这是解封过程：一次添加一个分片（以任何顺序），直到存在足够的分片来重建密钥并解密数据。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("一旦 Vault 被解封，它将保持解封的状态，直到发生以下两种情况之一：")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("密封可以在 Shamir 键和自动解封之间迁移。")]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),s("p",[t._v("好处很明显：secrets 的消费者需要定期检查 Vault 以续订租约（如果允许）或要求更换（Renew）secret。 这使得 Vault 审计日志更有价值，并且使密钥滚动变得更加容易。")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),s("p",[t._v("对于大多数 secrets ，后端通常会限制续约时间，以确保每隔一段时间更新一次。")]),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),s("p",[t._v("这是非常有用的：如果特定系统中存在入侵，可以快速地撤销特定后端或某个已配置后端的所有 secrets。")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),s("p",[t._v("Vault 支持许多 auth 方法。 一些 backends 针对用户，而另一些 backends 针对机器。 大多数身份验证 backends 必须在使用前启用。 要启用身份验证方法：")]),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),s("p",[t._v("Vault 同时支持多种 auth 方法，甚至可以在不同的路径上挂载相同类型的 auth 方法。 必须有一个身份验证才能获得对 Vault 的访问权限，并且目前无法强制用户通过多种\n身份验证方法来获取访问权限，尽管某些后端确实支持MFA。")]),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),s("p",[t._v("例如，即使你可以使用 GitHub 之类的东西进行身份验证，Vault 也会生成一个唯一的访问令牌，供你以后使用。 CLI 会自动将此令牌附加到请求，但如果你使用的是 API，\n则必须手动执行此操作。")]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),s("p",[t._v("身份验证完成后，就会登录，CLI 命令还将输出你的原始令牌。此令牌用于撤销和续订。当用户登录时，令牌的主要用例是更新，下面将在 “Auth Leases” 部分中介绍。")]),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),s("p",[t._v("和 secrets 一样，身份也有与之相关的租约（leases）。 这意味着你必须在租约过期后重新进行身份验证才能继续访问 Vault。")]),t._v(" "),s("p",[t._v("要设置与身份关联的租约，参考你正在使用的 auth 方法的帮助，可以查看每个后端如何实现租约。")]),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),t._m(82)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"dev-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dev-server","aria-hidden":"true"}},[this._v("#")]),this._v(" Dev server")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用 "),e("code",[this._v("vault server -dev")]),this._v(" 可以在 dev 模式下启动 Vault 服务器。 dev 模式服务器无需进一步设置，本地的 Vault CLI 将通过身份验证与其通信。\n这样可以轻松地试验 Vault 或启动 Vault 实例进行开发。 Vault 的每个功能在 dev 模式下都是可用的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[this._v("#")]),this._v(" Properties")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("strong",[t._v("Initialized and unsealed")]),t._v(" - dev 服务器会自动初始化和解封。 不需要使用 "),s("code",[t._v("vault operator unseal")]),t._v("。 它可以立即使用。")]),t._v(" "),s("li",[s("strong",[t._v("In-memory storage")]),t._v(" - 所有数据都存储（加密）在内存中。 Vault 服务器不需要任何文件权限。")]),t._v(" "),s("li",[s("strong",[t._v("Bound to local address without TLS")]),t._v(" - 服务器侦听 "),s("code",[t._v("127.0.0.1:8200")]),t._v("（默认服务器地址），没有使用 "),s("code",[t._v("TLS")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("Automatically Authenticated")]),t._v(" - 服务器存储你的 "),s("code",[t._v("root")]),t._v(" 访问令牌，以便 Vault CLI 访问。 如果通过 API 访问 Vault，则需要使用打印出来的令牌进\n行身份验证。")]),t._v(" "),s("li",[s("strong",[t._v("Single unseal key")]),t._v(" - 使用一个 "),s("code",[t._v("unseal key")]),t._v(" 初始化服务器。Vault 已经解封，但如果想尝试密封/解封，则只需要输出一个密钥。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"seal-unseal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#seal-unseal","aria-hidden":"true"}},[this._v("#")]),this._v(" Seal/Unseal")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("解封是构建 "),s("code",[t._v("master key")]),t._v("（因为 "),s("code",[t._v("master key")]),t._v(" 已经被分为 5 片，所以需要提供指定阀值的分片来重组 "),s("code",[t._v("master key")]),t._v("）的过程，"),s("code",[t._v("master key")]),t._v(" 是读取 "),s("code",[t._v("decryption key")]),t._v(" 以解\n密数据和访问 Vault 所必需的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"为什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么？","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么？")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("Vault 存储的数据以加密方式存储。 Vault "),s("strong",[t._v("需要 "),s("code",[t._v("encryption key")]),t._v(" 才能解密数据。 "),s("code",[t._v("encryption key")]),t._v(" 也与数据一起存储，但用另一个称为 "),s("code",[t._v("master key")]),t._v(" 的加密密钥加密。\n"),s("code",[t._v("master key")]),t._v(" 不存储在任何地方")]),t._v("（被分为了 5 个分片）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因此，要解密数据，Vault 必须解密需要 "),e("code",[this._v("master key")]),this._v(" 的 "),e("code",[this._v("encryption key")]),this._v("。 解封是重建此 "),e("code",[this._v("master key")]),this._v(" 的过程。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"解封"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解封","aria-hidden":"true"}},[this._v("#")]),this._v(" 解封")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("解封通过 "),e("code",[this._v("vault operator unseal")]),this._v(" 或 API 完成。此过程是有状态的：每个密钥都可以通过多台计算机上的多个机制输入，并且可以正常工作。这允许 "),e("code",[this._v("master key")]),this._v(" 的每个分片位于不同\n的机器上以提高安全性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("通过API 重新密封")]),this._v(" "),e("li",[this._v("服务器重启")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"密封"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#密封","aria-hidden":"true"}},[this._v("#")]),this._v(" 密封")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("还有一个密封 Vault 的 API。 这将丢弃 "),e("code",[this._v("master key")]),this._v(" 并需要另一个解封过程来恢复它。 密封只需要一个具有 "),e("code",[this._v("root")]),this._v(" 权限的操作员。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这样，如果检测到入侵，可以快速锁定 Vault 数据以尽量减少损坏。 如果不访问 "),e("code",[this._v("master key")]),this._v(" 分片，则无法再次访问它。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"自动解封"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动解封","aria-hidden":"true"}},[this._v("#")]),this._v(" 自动解封")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("自动解封的开发有助于降低对于保证 "),s("code",[t._v("master key")]),t._v(" 安全性的操作的复杂性。此功能将保护 "),s("code",[t._v("master key")]),t._v(" 的责任从用户委派给可信设备或服务。 "),s("code",[t._v("master key")]),t._v(" 不是只在内存中构造密钥，\n而是使用这些服务或设备之一加密，然后存储在存储后端中，允许 Vault 在启动时解密 "),s("code",[t._v("master key")]),t._v(" 并自动解封。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用自动解封时，Vault 中的某些操作仍需要法定数量的用户才能执行操作，例如生成 "),e("code",[this._v("root token")]),this._v("。 在初始化过程中，会生成一组称为恢复密钥的 Shamir 密钥，并用于这些操作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"seal-migration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#seal-migration","aria-hidden":"true"}},[this._v("#")]),this._v(" Seal Migration")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("要从 Shamir 键迁移到 Auto Unseal，请使服务器群集脱机并使用适当的"),s("a",{attrs:{href:""}},[t._v("密封配置")]),t._v("更新密封配置。当你重新启动服务器时，使用 "),s("code",[t._v("-migrate")]),t._v(" 标志运行解封过程。\n所有 "),s("code",[t._v("unseal")]),t._v(" 命令都必须指定 "),s("code",[t._v("-migrate")]),t._v(" 标志。输入所需的密封密钥阈值后，密封密钥将迁移到恢复密钥。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ vault operator unseal -migrate\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("要从 "),s("code",[t._v("Auto Unseal")]),t._v(" 迁移到 Shamir 键，请使服务器群集脱机并更新密封配置并将 "),s("code",[t._v("disabled =“true”")]),t._v(" 添加到密封块。这允许迁移使用此信息来解密密钥，但不会启动 Vault。\n当你重新启动服务器时，使用 "),s("code",[t._v("-migrate")]),t._v(" 标志运行 "),s("code",[t._v("unseal")]),t._v(" 进程并使用 "),s("code",[t._v("Recovery Keys")]),t._v(" 执行迁移。所有 "),s("code",[t._v("unseal")]),t._v(" 命令都必须指定 "),s("code",[t._v("-migrate")]),t._v(" 标志。输入所需的恢复密钥阈值后，\n将迁移恢复密钥以用作取消密钥。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"lease-renew-and-revoke"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lease-renew-and-revoke","aria-hidden":"true"}},[this._v("#")]),this._v(" Lease,Renew and Revoke")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于"),e("strong",[this._v("每个动态 secret 和 "),e("code",[this._v("service")]),this._v(" 类型的身份验证令牌，Vault 都会创建租约（Lease）：包含持续时间，可续订性等信息的元数据")]),this._v("。 Vault 承诺数据在给定的持续时间或\n生存时间（TTL）内有效。 租约到期后，Vault 可以自动撤销（Revoke）数据，并且 secret 的消费者不再能够确定它是否有效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Vault 中的"),e("strong",[this._v("所有动态 secret 都必须具有租约")]),this._v("（Lease）。 即使数据是永久有效的，也需要租约，强制消费者定期检查。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("除续期外，还可以撤销租约。 当租约被撤销时，它会立即使该 secret 无效并阻止任何进一步的续订。 例如，使用 "),e("a",{attrs:{href:""}},[this._v("AWS secrets 引擎")]),this._v("，在撤销租约时，将从 AWS 中删除访问密钥。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("撤销可以通过 API，通过 "),e("code",[this._v("vault revoke")]),this._v(" cli 命令手动进行，也可以由 Vault 自动进行。 租约到期后，Vault 将自动撤销该租约。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"lease-ids"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lease-ids","aria-hidden":"true"}},[this._v("#")]),this._v(" Lease IDs")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("读取动态 secrets 时，例如通过 "),s("code",[t._v("vault read")]),t._v("，Vault 总是会返回一个 "),s("code",[t._v("lease_id")]),t._v("。 这是用于 "),s("code",[t._v("vault renew")]),t._v(" 和 "),s("code",[t._v("vault revoke")]),t._v(" 等命令管理 secret 的租约。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"lease-durations-and-renewal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lease-durations-and-renewal","aria-hidden":"true"}},[this._v("#")]),this._v(" Lease Durations and Renewal")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("除了 "),e("code",[this._v("lease_id")]),this._v("，还可以读取到租约期限（"),e("code",[this._v("lease duration")]),this._v("）。 租约期限是生存时间值：租约有效的时间（以秒为单位）。 消费者必须在这个有效时间内续订这个 secret 的租约。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在续订租约时，用户可以从现在开始请求特定的时间来延长租约。 例如："),e("code",[this._v("vault renew my-lease-id 3600")]),this._v("，请求将 "),e("code",[this._v("my-lease-id")]),this._v(" 的租约延长 1 小时（ 3600 秒）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"prefix-based-revocation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prefix-based-revocation","aria-hidden":"true"}},[this._v("#")]),this._v(" Prefix-based Revocation")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("除了撤销（Revoke）一个 secret 之外，还可以根据 "),e("code",[this._v("lease_id")]),this._v(" 撤销多个 secret。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("lease_id")]),this._v(" 的结构使其前缀始终是请求 secret 的路径。 这可以让你撤销 secret 树。 例如，要撤消所有 AWS 访问密钥，你可以执行 "),e("code",[this._v("vault revoke -prefix aws/")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"authentication"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authentication","aria-hidden":"true"}},[this._v("#")]),this._v(" Authentication")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Vault 的身份验证就是由一个内部或外部的系统来验证用户或者机器提供的信息的过程")]),this._v("。 Vault 支持多种 "),e("a",{attrs:{href:""}},[this._v("auth methods")]),this._v("，包括 GitHub，LDAP，AppRole 等。\n每个 auth 方法都有一个特定的用例。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在客户端可以与 Vault 交互之前，它必须针对 auth 方法进行身份验证。 在验证时，会生成一个令牌。 此令牌在概念上类似于网站上的 "),e("code",[this._v("session ID")]),this._v("。 令牌可能具有附加策略，\n策略是在认证时映射上去的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"auth-methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#auth-methods","aria-hidden":"true"}},[this._v("#")]),this._v(" auth methods")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ vault "),e("span",{attrs:{class:"token function"}},[this._v("write")]),this._v(" sys/auth/my-auth type"),e("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v("userpass\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这会在路径 "),e("code",[this._v("my-auth")]),this._v(" 上启用 "),e("code",[this._v("userpass")]),this._v(" auth 方法。在路径 "),e("code",[this._v("my-auth")]),this._v(" 上可以使用这个身份验证来访问。 通常，你会在与其名称相同的路径上看到身份验证，但这不是必需的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("要了解有关此身份验证的更多信息，使用内置的 "),e("code",[this._v("path-help")]),this._v(" 命令：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("$ vault path-help auth/my-auth\n"),e("span",{attrs:{class:"token comment"}},[this._v("# ...")]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"tokens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tokens","aria-hidden":"true"}},[this._v("#")]),this._v(" Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这是一个"),e("a",{attrs:{href:""}},[this._v("关于 Token 的详细页面")]),this._v("，但重要的是要了解身份验证的工作方式是验证你的身份，然后生成与该身份相关联的令牌。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这个 Token 可以为任何后端进行身份验证，也可以与完整的令牌命令集一起使用，例如创建新的 "),e("code",[this._v("sub-tokens")]),this._v("，撤消令牌和续订令牌。 这些都包含在 "),e("a",{attrs:{href:""}},[this._v("Token concepts page")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"authenticating"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authenticating","aria-hidden":"true"}},[this._v("#")]),this._v(" Authenticating")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"使用cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用cli","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用CLI")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("要使用 CLI 进行身份验证，请使用 Vault 登录。这支持许多内置的 "),e("code",[this._v("auth")]),this._v(" 方法。 例如，使用 GitHub "),e("code",[this._v("auth")]),this._v("方法：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ vault login -method"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("github token"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("token"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("要确定 auth 方法需要哪些变量，请提供 "),e("code",[this._v("-method")]),this._v(" 标志，不带任何其他参数，将显示帮助。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"使用-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-api","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 API")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("API 身份验证通常用于机器的身份验证。 每个 auth 方法都实现自己的登录端点。 使用 "),e("code",[this._v("vault path-help")]),this._v(" 机制查找正确的端点。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("例如，GitHub 登录端点位于 "),e("code",[this._v("auth/github/login")]),this._v("。 并且为了确定所需的参数，可以使用 "),e("code",[this._v("vault path-help auth/github/login")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"auth-leases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#auth-leases","aria-hidden":"true"}},[this._v("#")]),this._v(" Auth Leases")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("身份也是可以更新的，而不必完全重新认证。只需使用 "),e("code",[this._v("vault token renew <token>")]),this._v("，这个 Token 是与你的身份相关联的令牌。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"tokens-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tokens-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Tokens 是 Vault 内部用于验证的核心方法。 Tokens 可以直接使用，或者可以使用 auth 方法基于外部身份动态生成 tokens")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果你已经阅读了入门指南，可能会注意到 "),e("code",[this._v("vault server -dev")]),this._v("（或非开发服务器的 "),e("code",[this._v("vault operator init")]),this._v(" ）会输出一个初始的 "),e("code",[this._v("root token")]),this._v("。 这是 Vault 的第一种身份验证方法。\n它也是唯一无法禁用的身份验证方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如身概念 "),e("a",{attrs:{href:""}},[this._v("Authentication")]),this._v(" 中所述，"),e("strong",[this._v("所有外部身份验证机制（如 GitHub）都映射到动态创建的 tokens")]),this._v("。 这些 tokens 具有与普通手动创建的令牌相同的属性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 Vault 中，tokens 映射到信息。 映射到 tokens 的最重要信息是一组一个或多个附加的"),e("a",{attrs:{href:""}},[this._v("策略")]),this._v("。这些策略控制允许 tokens 持有者在 Vault 中执行的操作。\n其他映射信息包括可以查看并添加到审核日志的元数据，创建时间，上次续订时间等。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"token-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-types","aria-hidden":"true"}},[this._v("#")]),this._v(" Token Types")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"the-token-store"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-token-store","aria-hidden":"true"}},[this._v("#")]),this._v(" The Token Store")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"root-tokens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#root-tokens","aria-hidden":"true"}},[this._v("#")]),this._v(" Root Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"token-hierarchies-and-orphan-tokens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-hierarchies-and-orphan-tokens","aria-hidden":"true"}},[this._v("#")]),this._v(" Token Hierarchies and Orphan Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"token-accessors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-accessors","aria-hidden":"true"}},[this._v("#")]),this._v(" Token Accessors")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"token-time-to-live-periodic-tokens-and-explicit-max-ttls"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-time-to-live-periodic-tokens-and-explicit-max-ttls","aria-hidden":"true"}},[this._v("#")]),this._v(" Token Time-To-Live, Periodic Tokens, and Explicit Max TTLs")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"the-general-case"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-general-case","aria-hidden":"true"}},[this._v("#")]),this._v(" The General Case")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"explicit-max-ttls"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explicit-max-ttls","aria-hidden":"true"}},[this._v("#")]),this._v(" Explicit Max TTLs")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"periodic-tokens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#periodic-tokens","aria-hidden":"true"}},[this._v("#")]),this._v(" Periodic Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cidr-bound-tokens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cidr-bound-tokens","aria-hidden":"true"}},[this._v("#")]),this._v(" CIDR-Bound Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"token-types-in-detail"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-types-in-detail","aria-hidden":"true"}},[this._v("#")]),this._v(" Token Types in Detail")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"service-tokens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-tokens","aria-hidden":"true"}},[this._v("#")]),this._v(" Service Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"batch-tokens"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#batch-tokens","aria-hidden":"true"}},[this._v("#")]),this._v(" Batch Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"token-type-comparison"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#token-type-comparison","aria-hidden":"true"}},[this._v("#")]),this._v(" Token Type Comparison")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"service-vs-batch-token-lease-handling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-vs-batch-token-lease-handling","aria-hidden":"true"}},[this._v("#")]),this._v(" Service vs. Batch Token Lease Handling")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"service-tokens-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-tokens-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Service Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"batch-tokens-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#batch-tokens-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Batch Tokens")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"response-wrapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-wrapping","aria-hidden":"true"}},[this._v("#")]),this._v(" Response Wrapping")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"policies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#policies","aria-hidden":"true"}},[this._v("#")]),this._v(" Policies")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"high-availability"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#high-availability","aria-hidden":"true"}},[this._v("#")]),this._v(" High Availability")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"pgp-gpg-and-keybase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pgp-gpg-and-keybase","aria-hidden":"true"}},[this._v("#")]),this._v(" PGP,GPG and Keybase")])}],!1,null,null,null);r.options.__file="concepts.md";e.default=r.exports}}]);